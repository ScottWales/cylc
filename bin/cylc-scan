#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute():
        sys.exit(0)

from cylc.port_scan import scan
from cylc.CylcOptionParsers import cop
from cylc.cfgspec.globalcfg import GLOBAL_CFG

parser = cop( """cylc [discovery] scan [OPTIONS]

Detect running suites by port scanning.  Use --verbose to see (with "connection
denied") suites owned by others too.

WARNING: a suite suspended with Ctrl-Z will cause port scans to hang for all
users until timing out (see --pyro-timeout, default 60 seconds).""",
pyro=True, noforce=True, argdoc=[], auto_add=False)

parser.add_option( "--print-ports",
        help="Print the port range from the site config file "
        "($CYLC_DIR/conf/global.rc).",
        action="store_true",default=False, dest="print_ports" )

parser.add_std_options()
parser.remove_option("--pyro-timeout")
parser.add_option( "--pyro-timeout", metavar='SEC',
        help="Set a timeout for network connections "
        "to running suites. The default is 60 seconds.",
        action="store", default=60, dest="pyro_timeout" )

( options, args ) = parser.parse_args()


if options.print_ports:
    base = GLOBAL_CFG.get( ['pyro','base port'] )
    range = GLOBAL_CFG.get( ['pyro','maximum number of ports'] )
    print base, '<= port <=', base + range
    sys.exit(0)

suites = scan( options.host, options.db, options.pyro_timeout )
