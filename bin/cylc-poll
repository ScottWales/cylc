#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop, multitask_usage
from cylc.command_prep import prep_pyro
import cylc.flags

parser = cop("""cylc [control] poll [OPTIONS] ARGS

Poll active tasks (those in the 'submitted' or 'running' states) to verify
or update their statuses - even if they have suffered an external hard kill.

To poll one or more tasks, "cylc poll REG MATCH POINT"; to poll all active
tasks: "cylc poll REG".

Note that automatic job polling can used to track task status on task hosts
that do not allow any communication by RPC (pyro) or ssh back to the suite host
- see site/user config file documentation.

Polling is also done automatically on restarting a suite, for any tasks that
were recorded as submitted or running when the suite went down.
""" + multitask_usage, pyro=True, multitask=True,
        argdoc=[('REG', 'Suite name'),
            ('[MATCH]', 'Task or family name matching regular expression'),
            ('[POINT]', 'Task cycle point (e.g. date-time or integer)')])

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro(args[0], options).execute()

if len(args) == 3:
    name = args[1]
    point_string = args[2]
elif len(args) == 1:
    name = str(None)
    point_string = str(None)
else:
    parser.error("Wrong number of arguments.")

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout,
            options.port ).get_proxy( 'command-interface' )
    prompt( 'Poll task ' + name + ' at ' + point_string + ' in ' + suite,
            options.force )
    result = proxy.put( 'poll tasks', name, point_string, options.is_family )

except Exception, x:
    if cylc.flags.debug:
        raise
    sys.exit(x)

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )
