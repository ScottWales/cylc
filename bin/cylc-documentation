#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os, re
import tempfile
import subprocess
from cylc.CylcOptionParsers import cop

parser = cop( """cylc [info] documentation|browse [OPTIONS]

Display cylc documentation:
 1/ The User Guide in PDF format (default)
 2/ The User Guide in HTML format
 3/ The change log (plain text format)
 4/ The cylc internet homepage.
 
Required environment variables:
  $PDF_READER    (e.g. evince)
  $HTML_READER   (e.g. firefox)
  $EDITOR        (e.g. vim)
  $GEDITOR       (e.g. 'gvim -f')""", argdoc=[])

parser.add_option( "--pdf",
        help="Display the PDF User Guide (DEFAULT).",
        action="store_true", default=False, dest="pdf" )

parser.add_option( "--html",
        help="Display the multi-page HTML User Guide.",
        action="store_true", default=False, dest="html" )

parser.add_option( "--html-single",
        help="Display the single page HTML User Guide.",
        action="store_true", default=False, dest="htmlsingle" )

parser.add_option( "--www",
        help="Display the cylc internet homepage.",
        action="store_true", default=False, dest="www" )

parser.add_option( "--log",
        help="Display the cylc repository change log.",
        action="store_true", default=False, dest="log" )

parser.add_option( "-g",
        help="Use $GEDITOR instead of $EDITOR to view the change log.",
        action="store_true", default=False, dest="geditor" )

( options, args ) = parser.parse_args()

if options.log:
    if options.geditor:
        edvar = 'GEDITOR'
    else:
        edvar = 'EDITOR'
    try:
        appl = os.environ[edvar]
    except KeyError:
        raise SystemExit( 'ERROR: $' + edvar + ' is not defined' )

elif options.www or options.html or options.htmlsingle:
    try:
        appl = os.environ['HTML_READER']
    except KeyError:
        raise SystemExit( "ERROR: $HTML_READER is not defined" )
else:
    try:
        appl = os.environ['PDF_READER']
    except KeyError:
        raise SystemExit( "ERROR: $PDF_READER is not defined" )

if options.www:
    file = "http://hjoliver.github.com/cylc"
else:
    try:
        cdir = os.environ['CYLC_DIR']
    except KeyError:
        raise SystemExit( "ERROR: $CYLC_DIR is not defined" )

    if options.html:
        file = os.path.join( cdir, 'doc', 'cug-html.html' )
    elif options.htmlsingle:
        file = os.path.join( cdir, 'doc', 'single', 'cug-html.html' )
    elif options.log:
        file = os.path.join( cdir, 'changelog.txt' )
    else:
        if not options.pdf:
            print "No option chosen: defaulting to --pdf"
            options.pdf = True
        file = os.path.join( cdir, 'doc', 'CylcUserGuide.pdf' )

    if not os.path.isfile( file ):
        print >> sys.stderr, "ERROR, File not found:", file
        if not options.pdf:
            sys.exit(1)
        else:
           file = os.path.join( cdir, 'doc', 'cug-pdf.pdf' )
           if not os.path.isfile( file ):
               print >> sys.stderr, "ERROR, File not found:", file
               sys.exit(1)

# in case $EDITOR has options, e.g. 'emacs -nw':
command_list = re.split( ' ', appl )
command_list.append( file )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        raise SystemExit( command + ' failed: ' + str( retcode ))
except OSError:
    # the command was not invoked
    raise SystemExit( 'ERROR: unable to execute: ' + command )

