#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.config import config
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_file

def prdict( dct, level=0, indent=0, prefix='' ):
    for key,val in dct.iteritems():
        if isinstance( val, dict ):
            print prefix + '   '*indent + '['*(level+1) + str(key) + ']'*(level+1)
            prdict( val, level=level+1, indent=indent+1, prefix=prefix)
        else:
            print prefix + '   '*indent + str(key) + ' = ' + str(val) 

parser = cop( usage = """cylc [info] get-config [OPTIONS] REG [ITEMS...]

Print configuration settings from a parsed suite definition, after
runtime inheritance processing and including default values for items
that are not explicitly set in the suite.rc file. This command enables,
for example, automated handling of suites and suite output without
assuming directory locations and the like.

Config items containing spaces must be quoted on the command line. If
a single item is requested only its value will be printed; otherwise the 
full nested structure below the requested config section is printed. 

Example, from a suite registered as foo.bar.baz:
|# SUITE.RC
|[runtime]
|    [[modelX]]
|        [[[environment]]]
|            FOO = foo
|            BAR = bar

$ cylc get-config foo.bar.baz runtime modelX environment FOO
foo

$ cylc get-config foo.bar.baz runtime modelX environment
FOO = foo
BAR = bar

$ cylc get-config foo.bar.baz runtime modelX
...
work directory = $CYLC_SUITE_DEF_PATH/share
[[[environment]]]
    FOO = foo
    BAR = bar
...""",
    argdoc=[('REG', 'Suite name'), 
        ('[ITEMS...]', 'suite.rc section and item hierarchy')])

parser.add_option( "-t", "--tasks",
        help="Print configured task list.",
        action="store_true", default=False, dest="tasks" )

parser.add_option( "-d", "--directories",
        help="Print configured suite directory paths.",
        action="store_true", default=False, dest="dpaths" )

parser.add_option( "-m", "--mark-output",
        help="Prefix output lines with '!cylc!' to aid "
        "in automated parsing (output can be contaminated by "
        "stdout from login scripts, for example, for remote "
        "invocation).",
        action="store_true", default=False, dest="markoutput" )

parser.add_option( "-p", "--python",
        help="Write out the config data structure in Python native format.",
        action="store_true", default=False, dest="pnative" )

( options, args ) = parser.parse_args()
owner = options.db_owner

suite, suiterc = prep_file( args[0], options ).execute()

try:
    config = config( suite, suiterc, owner )
except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

if options.dpaths:
    print "SUITE LOG DIRECTORY:\n ", config['cylc']['logging']['directory']
    print "SUITE STATE DUMP DIRECTORY:\n ", config['cylc']['state dumps']['directory']
    print "TASK LOG DIRECTORIES:"
    logdirs = {}
    root_ldir = config['runtime']['root']['log directory']
    ldirs = [root_ldir]
    logdirs['root'] = root_ldir
    for ns in config['runtime'].keys():
        dir = config['runtime'][ns]['log directory']
        if dir not in ldirs:
            ldirs.append(dir)
            logdirs[ns] = dir
    print "  + root:", root_ldir
    for ns in logdirs.keys():
        if ns == "root":
            continue
        print "  + " + ns + ":", logdirs[ns]
    sys.exit(0)

if options.markoutput:
    prefix = '!cylc!'
else:
    prefix = ''

if options.tasks:
    for task in config.get_task_name_list():
        print prefix + task
    sys.exit(0)

res = config
try:
    for item in args[1:]:
        res = res[item]
except KeyError, x:
    raise SystemExit( 'ERROR, item not found: ' + str(x) )

if isinstance( res, dict ):
    if options.pnative:
        print res
    else:
        prdict( res, level=len(args[1:]), prefix=prefix)
else:
    print prefix + str(res)

