#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

import os
from cylc.CylcOptionParsers import cop
from cylc.task_message import message
from cylc import cylc_pyro_client
from cylc.command_prep import prep_pyro
from cylc.cycle_time import ct, CycleTimeError

usage = """cylc [task] broadcast [OPTIONS] ARGS

This command, normally used by running tasks, broadcasts environment
variables (name=value) to the execution environments of subsequent
tasks. Note this is achieved by writing broadcast variables to
task job scripts, not by normal shell-to-subshell environment
inheritance, so receiving tasks can even be on other hosts. Broadcast
variables override existing variables of the same name in the task
execution environment. It is up to the user to ensure that variable
names do not clash and that the intended use of broadcast variables is
consistent with the suite dependency structure (receiving tasks must be
downstream of the broadcasting task, obviously).

Broadcast variables persist across suite restarts.

Task job scripts abort on use of unset environment variables so
receiving tasks should supply a default value if the upstream broadcast
can not be relied on: FOO=${BROADCAST:-default}.

Suite identity is normally determined from the task execution
environment supplied by the suite. Export CYLC_SUITE_REG_NAME before
manual use on the command line.

Broadcast variables targetted at a specific task ID or cycle time expire
and are forgotten as the suite moves on. Untargetted variables and those
targetted at a task name persist throughout the suite run and so should
be used sparingly. 

Note that variable values with internal spaces must be quoted, e.g.:
 % cylc broadcast MYVAR "the quick brown fox"
Within scripting sections in the suite.rc file single quotes can be used
inside triple-quoted multi-line strings so long as there is a space
before the closing triple quotes."""

parser = cop( usage, pyro=True, 
        argdoc = [ ("NAME", "Variable name"), ("VALUE", "Variable value"),
            ("[TARGET]", 
                "Broadcast only to a target task ID, name, or cycle.")])

( options, args ) = parser.parse_args()

try:
   suite = os.environ['CYLC_SUITE_REG_NAME']
except KeyError, x:
    raise SystemExit(x)

suite, pphrase = prep_pyro( suite, options ).execute()

debug = False
if options.debug:
    debug = True
else:
    try:
        # from task execution environment
        if os.environ['CYLC_DEBUG'] == 'True':
            debug = True
    except KeyError:
        pass

varname = args[0]
value = args[1]
if len(args) == 3:
    target = args[2]
else:
    target = None

# target validation is done by the receiver

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, None, options.verbose ).get_proxy( 'receiver' )
    success, msg = proxy.receive( varname, value, target )
except Exception, x:
    if debug:
        raise
    raise SystemExit(x)

if not success:
    raise SystemExit( msg )
